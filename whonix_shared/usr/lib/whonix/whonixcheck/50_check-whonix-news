#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

download_whonix_news() {
   trap "error_handler" ERR

   SOCKS_PORT_WHONIX_NEWS="9114"

   local MSG="Whonix News Download: Checking for Whonix news and updates..."
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

   mkdir --parents "$VERIFY_TEMPDIR/news"

   declare -A -g whonix_news_link_list
   declare -A -g whonix_news_download_return
   declare -A -g whonix_news_verify_return

   whonix_news_link_list[http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news_v3/whonix_news.tar.gz.asc/download]="whonix_news.tar.gz.asc"

   whonix_news_link_list[http://sourceforge.net/projects/whonixdevelopermetafiles/files/internal/news_v3/whonix_news.tar.gz/download]="whonix_news.tar.gz"

   ## sf.net does not support ssl.
   ## --location is required since sf.net uses redirects to mirrors.

   local link

   for link in "${!whonix_news_link_list[@]}"; do
      local filename
      filename="${whonix_news_link_list[$link]}"

      true "link: $link"
      true "filename: $filename"

      whonix_news_download_return[$link]="0"

      $CURL \
         $CURL_VERBOSE \
         --fail \
         --socks5-hostname socks5h://"$GATEWAY_IP":"$SOCKS_PORT_WHONIX_NEWS"/ \
         --location \
         --max-time 180 \
         --output "$VERIFY_TEMPDIR/news/$filename" \
         "$link" \
         &

      lastpid="$!"
      wait "$lastpid" || { whonix_news_download_return[$link]="$?" ; true; };

      if [ ! "${whonix_news_download_return[$link]}" = "0" ]; then
         local curl_status_message
         curl_status_message="$(/usr/lib/whonix/curl_return_codes "${whonix_news_download_return[$link]}")"
         local MSG="Whonix News Result: Could not download Whonix News File "$filename". (curl return code: $curl_status_message)"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         return 0
      fi

   done

   verify_whonix_news

   if [ ! "$whonix_news_verify_return" = "0" ]; then
      true "$0 WARNING: whonix_news_verify_return is not 0, it is $whonix_news_verify_return, return"
      return 0
   fi

   extract_whonix_news

   if [ ! "$whonix_news_tar_return" = "0" ]; then
      true "$0 ERROR: whonix_news_tar_return is not 0, it is $whonix_news_tar_return, return"
      return 0
   fi

   check_whonix_debian_version
   check_whonix_build_version
   check_whonix_debian_news
   check_whonix_build_news
   check_whonix_blog
}

verify_whonix_news() {
   trap "error_handler" ERR

   ## Sanity tests.
   command -v date >/dev/null
   command -v gpg >/dev/null

   local whonix_news_gpg_temp_dir
   whonix_news_gpg_temp_dir="$VERIFY_TEMPDIR/news_gpg"

   rm --recursive --force "$whonix_news_gpg_temp_dir"
   mkdir --parents "$whonix_news_gpg_temp_dir"
   chmod --recursive 700 "$whonix_news_gpg_temp_dir"

   whonix_news_verify_return_general="0"

   true "a whonix_news_verify_return_general: $whonix_news_verify_return_general"

   gpg \
      --homedir "$whonix_news_gpg_temp_dir" \
      --fingerprint \
      >/dev/null 2>/dev/null \
      || { whonix_news_verify_return_general="$?" ; true; };

   true "b whonix_news_verify_return_general: $whonix_news_verify_return_general"

   local key

   for key in "/usr/share/whonix/keys/whonix-news-keys.d/"*; do
      local key_filename
      key_filename="$(basename "$key")"
      if [ "$key_filename" = "placeholder" ]; then
         continue
      fi
      if [ "$key_filename" = "*" ]; then
         ## Folder is empty.
         continue
      fi
      gpg \
         --homedir "$whonix_news_gpg_temp_dir" \
         --import "$key" \
         2>/dev/null \
         || { whonix_news_verify_return_general="$?" ; true; };
      if [ ! "$whonix_news_verify_return_general" = "0" ]; then
         break
      fi
   done

   true "c whonix_news_verify_return_general: $whonix_news_verify_return_general"

   if [ ! "$whonix_news_verify_return_general" = "0" ]; then
      local MSG="Whonix News Download Result: General Whonix News OpenPGP Verification Error. Please report this bug!"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   whonix_news_verify_return="0"

   true "d whonix_news_verify_return: ${whonix_news_verify_return}"

   local filename
   filename="whonix_news.tar.gz"
   local signature
   signature="whonix_news.tar.gz.asc"

   gpg_fd_one="$(\
      gpg \
         --status-fd 1 \
         --homedir "$whonix_news_gpg_temp_dir" \
         --verify "$VERIFY_TEMPDIR/news/$signature" \
         2>/dev/null \
   )" || { whonix_news_verify_return="$?" ; true; };

   ## Example gpg_fd_one:
   ## [GNUPG:] SIG_ID ckz4Z2Th1KU9o1sVsWMY8JXdg+A 2013-10-13 1381635738
   ## [GNUPG:] GOODSIG 9C131AD3713AAEEF adrelanos <adrelanos at riseup dot net>
   ## [GNUPG:] VALIDSIG 9B157153925C303A42253AFB9C131AD3713AAEEF 2013-10-13 1381635738 0 4 0 1 10 00 9B157153925C303A42253AFB9C131AD3713AAEEF
   ## [GNUPG:] TRUST_UNDEFINED

   ## Another example gpg_fd_one:
   ## [GNUPG:] ERRSIG 9C131AD3713AAEEF 1 10 00 1381635738 9
   ## [GNUPG:] NO_PUBKEY 9C131AD3713AAEEF

   true "e whonix_news_verify_return: ${whonix_news_verify_return}"

   if [ ! "${whonix_news_verify_return}" = "0" ]; then
         local MSG="Whonix News Download Result: Could not OpenPGP verify authenticity of Whonix News $filename!!! (gpg return code: ${whonix_news_verify_return}) This is either a Whonix Bug or an attack on Whonix!!!"
         $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
         $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
         return 0
   fi

   local MSG="Whonix News Download: Successfully verified $filename via OpenPGP."

   local line
   local signed_on_unixtime

   for line in "$gpg_fd_one"; do
      local one two three four five
      read -r one two three four five _ <<< "$line"
      local signed_on_unixtime
      signed_on_unixtime="$five"
   done

   if [ "$signed_on_unixtime" = "" ]; then
      whonix_news_verify_return="1000"
      local MSG="Whonix News Check: variable signed_on_unixtime is empty. Please report this bug!"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   ## Thanks to:
   ## http://mywiki.wooledge.org/BashFAQ/054
   if [[ "$signed_on_unixtime" != *[!0-9]* ]]; then
      true "'$signed_on_unixtime' is strictly numeric."
   else
      whonix_news_verify_return="2000"
      local MSG="Whonix News Check: Variable signed_on_unixtime includes a non-digit: $signed_on_unixtime Please report this bug!"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local current_unixtime
   current_unixtime="$(date +%s)"
   local current_time
   current_time="$(date)"

   true "signed_on_unixtime: $signed_on_unixtime"
   true "current_unixtime: $current_unixtime"

   local difference_in_seconds
   difference_in_seconds="$(expr "$current_unixtime" - "$signed_on_unixtime")" || true
   local difference_in_minutes
   difference_in_minutes="$(expr "$difference_in_seconds" / "60")" || true

   ## One month has 2592000 seconds.
   ## (60 [seconds] * 60 [minutes] * 24 [hours] * 30 [days])
   local month_has_seconds
   month_has_seconds="2592000"

   local maximum_age_in_seconds
   maximum_age_in_seconds="$month_has_seconds"

   if [ "$current_unixtime" -le "$signed_on_unixtime" ]; then
      whonix_news_verify_return="3000"
      local MSG="Whonix News Check: Your clock is slow. According to your system, Whonix News File was signed $difference_in_minutes minutes before current time.
Please run Timesync: Start menu -> Applications -> System -> Whonix Timesync
                     or in Terminal: timesync"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local in_future_in_seconds="$(expr "$difference_in_seconds" - "$maximum_age_in_seconds")" || true
   local in_future_in_minutes="$(expr "$in_future_in_seconds" / "60")" || true

   if [ "$difference_in_seconds" -ge "$maximum_age_in_seconds" ]; then
      whonix_news_verify_return="4000"
      local MSG="Whonix News Check: Whonix News File is no longer valid (outdated).
Either,
- your clock is fast (at least $in_future_in_minutes minutes fast)
  In that case, please run Timesync: Start menu -> Applications -> System -> Whonix Timesync
                     or in Terminal: timesync
- it has been forgotten to refresh Whonix's News File (invalid since $in_future_in_minutes minutes)
- this is a Whonix Bug
- or this is an attack on Whonix"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local MSG="Whonix News Check: news file valid."
}

extract_whonix_news() {
   trap "error_handler" ERR

   local filename
   filename="whonix_news.tar.gz"

   whonix_news_tar_return="0"

   tar -xvzf "$VERIFY_TEMPDIR/news/$filename" -C "$VERIFY_TEMPDIR/news/" . >/dev/null || { whonix_news_tar_return="$?" ; true; };

   if [ ! "$whonix_news_tar_return" = "0" ]; then
      local MSG="Whonix News Download Result: Could not extract $filename! (tar return code: ${whonix_news_tar_return}) Please report this bug!"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   ## Debugging.
   #ls -la "$VERIFY_TEMPDIR/news/"
}

check_whonix_debian_version() {
   trap "error_handler" ERR

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_valid_deb_versions"

   if [ ! -f "$filename" ]; then
      ## This file should always exist.
      local MSG="Whonix News Check: File $filename does not exist. Please report this bug!"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
$output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local outdated_deb
   outdated_deb="1"

   while read LINE; do
      #true "$i: $LINE"
      if [ "$whonix_deb_package_version" = "$LINE" ]; then
         outdated_deb="0"
      fi
   done < "$filename"

   if [ "$outdated_deb" = "0" ]; then
      ## Up to date...
      local MSG="Whonix News Download Result: Installed Whonix Debian Package $whonix_deb_package_version is up to date."
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
   else
      ## Outdated...
      local MSG="Whonix News Download Result: Installed Whonix Debian Package $whonix_deb_package_version is outdated! You can automatically update using Whonix's internal updater. Please update using:
    sudo apt-get update && sudo apt-get dist-upgrade"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
   fi
}

check_whonix_build_version() {
   trap "error_handler" ERR

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_valid_build_versions"

   if [ ! -f "$filename" ]; then
      ## This file should always exist.
      local MSG="Whonix News Check: File $filename does not exist. Please report this bug!"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
$output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local outdated_build
   outdated_build="1"

   while read LINE; do
      #true "$i: $LINE"
      if [ "$whonix_build_version" = "$LINE" ]; then
         outdated_build="0"
      fi
   done < "$filename"

   if [ "$outdated_build" = "0" ]; then
      ## Up to date...
      local MSG="Whonix News Download Result: Installed Whonix Build $whonix_build_version is up to date."
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
$output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
   else
      ## Outdated...
      local MSG="Whonix News Download Result: Whonix Build $whonix_build_version is outdated! Sorry, automatically updating this Whonix version is not possible. You have to manually download a new Whonix image."
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
   fi
}

check_whonix_debian_news() {
   trap "error_handler" ERR

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_${whonix_deb_package_version}_deb_news"

   if [ ! -f "$filename" ]; then
      ## This will happen:
      ## - when using custom git tags / versions
      ## - when no news file has been uploaded yet
      local MSG="Whonix News Download Result: There is no news file available for Whonix Debian Version ${whonix_deb_package_version} yet."
   else
      local MSG
      MSG="$(cat "$filename")"

      if [ "$MSG" = "" ]; then
         return 0
      fi
   fi

   $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
}

check_whonix_build_news() {
   trap "error_handler" ERR

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_${vm_lower_case_short}_${whonix_build_version}_build_news"

   if [ ! -f "$filename" ]; then
      ## This will happen:
      ## - when using custom git tags / versions
      ## - when no news file has been uploaded yet
      local MSG="Whonix News Download Result: There is no news file available for Whonix Build Version ${whonix_build_version} yet."
   else
      local MSG
      MSG="$(cat "$filename")"

      if [ "$MSG" = "" ]; then
         return 0
      fi
   fi

   $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
}

check_whonix_blog() {
   trap "error_handler" ERR

   BLOG_SUCCESS="0"

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_important_blog.txt"

   if [ ! -f "$filename" ]; then
      local MSG="Whonix Blog Download Result: $filename does not exist."
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
   else
      cp "$filename" "/var/lib/whonix/whonixcheck/important_blog.txt"
      BLOG_SUCCESS="$(( $BLOG_SUCCESS + 1))"
   fi

   local filename
   filename="$VERIFY_TEMPDIR/news/whonix_feature_blog.txt"

   if [ ! -f "$filename" ]; then
      local MSG="Whonix Blog Download Result: $filename does not exist."
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
   else
      cp "$filename" "/var/lib/whonix/whonixcheck/important_blog.txt"
      BLOG_SUCCESS="$(( $BLOG_SUCCESS + 1))"
   fi

   ## Let's make just one success message, not two.
   if [ "$BLOG_SUCCESS" = "2" ]; then
      local MSG="Whonix Blog Download Result: Success."
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi
}
