#!/bin/bash

# This file is part of Whonix
# Copyright (C) 2012 - 2013 adrelanos <adrelanos at riseup dot net>
# See the file COPYING for copying conditions.

SOCKS_PORT_WHONIX_NEWS="9114"
BLOG_SUCCESS=0

download_important_blog() {
   trap "error_handler" ERR

   BLOG_NAME="Whonix Important Blog"
   BLOG_HTML_FILE="importantblog.html"
   BLOG_TXT_FILE="important_blog.txt"
   BLOG_URL="https://anonymousoperatingsystem.wordpress.com/category/important/feed/"
   RAWDOG_CONFIG="/etc/whonixcheck_rawdog/importantblog.conf"
   FEED_FILE="/var/lib/whonix/whonixcheck/importantblog.feed"

   download_blog

   if [ ! "$DOWNLOAD_BLOG_RETURN" = "0" ]; then
      return 0
   fi

   parse_blog
}

download_feature_blog() {
   trap "error_handler" ERR

   BLOG_NAME="Whonix Feature Blog"
   BLOG_HTML_FILE="featureblog.html"
   BLOG_TXT_FILE="feature_blog.txt"
   BLOG_URL="https://anonymousoperatingsystem.wordpress.com/feed/"
   RAWDOG_CONFIG="/etc/whonixcheck_rawdog/featureblog.conf"
   FEED_FILE="/var/lib/whonix/whonixcheck/featureblog.feed"

   download_blog

   if [ ! "$DOWNLOAD_BLOG_RETURN" = "0" ]; then
      return 0
   fi

   parse_blog
}

download_blog() {
   trap "error_handler" ERR

   local MSG="Whonix Blog Download: Downloading "$BLOG_NAME"..."
   $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"

   rm -f "$FEED_FILE"

   DOWNLOAD_BLOG_RETURN="0"

   ## --tlsv1 --proto =https \

   $CURL \
      --fail \
      $CURL_VERBOSE \
      --socks5-hostname "socks5h://$GATEWAY_IP:$SOCKS_PORT_WHONIX_NEWS/" \
      --max-time 180 \
      --location \
      --output "$FEED_FILE" \
      "$BLOG_URL" \
      &

   lastpid="$!"
   wait "$lastpid" || { DOWNLOAD_BLOG_RETURN="$?" ; true; };

   if [ "$DOWNLOAD_BLOG_RETURN" = "0" ]; then
      return 0
   fi

   local curl_status_message
   curl_status_message="$(/usr/lib/whonix/curl_return_codes "$DOWNLOAD_BLOG_RETURN")"

   local MSG="Whonix Blog Download Result: Could not download $BLOG_NAME. (curl return code: $curl_status_message)"
   $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
   $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
}

parse_blog() {
   trap "error_handler" ERR

   ## rawdog unfortunately always requires a config file in /home/$user/.rawdog/config,
   ## see man rawdog.
   cp "/etc/whonixcheck_rawdog/config" "/home/rawdog/.rawdog/config"

   ## rawdog default config file suggest to place a style.css in the same folder as the
   ## output file.
   cp "/etc/whonixcheck_rawdog/style.css" "/var/lib/whonix/whonixcheck/"

   ## Delete the state file, because we use curl to download the feed and
   ## our own interval anyway. Maybe not necessary.
   rm -f "/home/rawdog/.rawdog/state"

   local RAWDOG_RETURN
   RAWDOG_RETURN="0"

   sudo -u rawdog \
      $RAWDOG \
         --config "$RAWDOG_CONFIG" \
         $RAWDOG_VERBOSE \
         --update \
         --write \
         &

   lastpid="$!"
   wait "$lastpid" || { RAWDOG_RETURN="$?" ; true; };

   if [ "$RAWDOG_RETURN" = "0" ]; then
      BLOG_SUCCESS="$(( $BLOG_SUCCESS + 1))"
   else
      local MSG="Whonix Blog Download Result: Could not parse $BLOG_NAME. (rawdog return code: $RAWDOG_RETURN)"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   local html_to_text_parser_return
   html_to_text_parser_return="0"

   ## Rawdog has been (temporarily) removed from Debian testing.
   #sudo -u rawdog \
      #pandoc \
         #--read=html \
         #--write=plain \
         #--output="/var/lib/whonix/whonixblog/$BLOG_TXT_FILE" \
         #"/var/lib/whonix/whonixcheck/$BLOG_HTML_FILE" \
         #&

   sudo -u rawdog \
      html2text \
         -o "/var/lib/whonix/whonixblog/$BLOG_TXT_FILE" \
         "/var/lib/whonix/whonixcheck/$BLOG_HTML_FILE" \
         &

   lastpid="$!"
   wait "$lastpid" || { html_to_text_parser_return="$?" ; true; };

   if [ "$html_to_text_parser_return" = "0" ]; then
      true
   else
      local MSG="Whonix Blog Download Result: Could not parse $BLOG_NAME. (html to text parser return code: $html_to_text_parser_return)"
      $output ${output_opts[@]} --messagex --typex "error" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "error" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi

   ## Let's make just one success message, not two.
   if [ "$BLOG_SUCCESS" = "2" ]; then
      local MSG="Whonix Blog Download Result: Success."
      $output ${output_opts[@]} --messagex --typex "info" --titlex "$TITLE" --message "$MSG"
      $output ${output_opts[@]} --messagecli --typecli "info" --titlecli "$TITLE" --message "$MSG"
      return 0
   fi
}
